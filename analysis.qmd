---
title: "Global education"
subtitle: ""
author: "James Goldie, 360info"
date: "2022-03-15"
code-fold: true
theme: style/article.scss
format:
  html:
    self-contained: true
---

## Setup 
```{r}
#| label: setup

suppressPackageStartupMessages({
  library(tidyverse)
  library(here)
})
library(pins)
library(countrycode)
```

## Getting the data

This data comes from the [UNESCO Institute for Statistics (UIS)](http://data.uis.unesco.org).

We'll use their [Bulk Data Download Service](https://apiportal.uis.unesco.org/bdds) to acquire the data quickly, but we're particularly interested in the indicators within the Education theme labelled `Number and rates of international mobile students (inbound and outbound)`.

```{r}
#| label: import

data_cache <- here("data", ".cache")
dir.create(data_cache, showWarnings = FALSE)

# download the zip file (keeping it cached if we redo this)
zipped_data <-
  board_url(
    c(opri = paste0(
      "https://apimgmtstzgjpfeq2u763lag.blob.core.windows.net/",
      "content/MediaLibrary/bdds/OPRI.zip")),
    cache = data_cache) %>%
  pin_download("opri")

# unzip it 
unzip(zipped_data, exdir = data_cache)

# read the coding sheets in
country_map <- read_csv(file.path(data_cache, "OPRI_COUNTRY.csv"), col_types = "cc")
indicator_map <- read_csv(
  file.path(data_cache, "OPRI_LABEL.csv"),
  col_types = "cc")
region_map <- read_csv(file.path(data_cache, "OPRI_REGION.csv"), col_types = "ccc")

# read the data in
national_data <- read_csv(
  file.path(data_cache, "OPRI_DATA_NATIONAL.csv"),
  col_types = "ccin-c")
```

## Tidying and joining the origin data

This data is two dimensional, in a way: there's the country students go from (that is, the _origin_) and the country that go to (the _destination_). The way the data is organised into indicators by origin (`"[continent]: "Students from" [country], both sexes (number)"`), and within that indicator there's a row for each destination, each year.

So you can easily look up where a country's students have gone. If you want to look up where a country's students have come from, though, you would need to tally up the destination row for a country in _every_ origin indicator. That's what we're going to do (with the implicit assumption that there are no countries missing).

The national data already has a destination column. It also has an indicator number column, and we need to map that back to a country code using the label map and the country map.

```{r}
#| label: labelmap

# first, isolate the continent and country of origin
indicator_map %>%
  filter(str_detect(INDICATOR_LABEL_EN, "Students from")) %>%
  mutate(
    INDICATOR_LABEL_EN = str_replace(INDICATOR_LABEL_EN,
      fixed(", both sexes (number)"), ""),
    INDICATOR_LABEL_EN = str_replace(INDICATOR_LABEL_EN,
      fixed(" Students from "), "")) %>%
  separate(INDICATOR_LABEL_EN, into = c("continent", "country"), sep = ":") %>%
  # some indicators also preface country name with "the "
  mutate(country = str_replace(country, "^the ", "")) ->
tidy_origins

# now match these to the country map
tidy_origins %>%
  left_join(country_map, by = c("country" = "COUNTRY_NAME_EN")) %>%
  # we'll use {countrycode} as a backup for the un country list,
  # since they aren't always entirely consistent
  mutate(
    countrycode_backup = countrycode(country,
      origin = "country.name", destination = "iso3c"),
    code = coalesce(COUNTRY_ID, countrycode_backup)) %>%
  select(INDICATOR_ID,
    continent,
    country_name = country,
    country_code = code) ->
indicator_origin_map
```

Note that we still have a few unmapped country codes: those cases where the origin _continent_ is known but not the _country_:

```{r}
#| label: missingcountries
#| column: page
indicator_origin_map %>%
  filter(is.na(country_code)) %>%
  knitr::kable()
```

That's okay! Now we're ready to map these codes back onto the national data:

```{r}
#| label: nationaldata

national_data %>%
  select(INDICATOR_ID, dest_country_code = COUNTRY_ID, year = YEAR,
    value = VALUE) %>%
  # join the origin map in
  filter(INDICATOR_ID %in% indicator_origin_map$INDICATOR_ID) %>%
  left_join(indicator_origin_map, by = "INDICATOR_ID") %>%
  rename(origin_continent = continent, origin_country_name = country_name,
    origin_country_code = country_code) %>%
  # now we're going to join it _again_, but this time to get  the _destination_
  # name and continent
  left_join(indicator_origin_map,
    by = c("dest_country_code" = "country_code")) %>%
  rename(dest_continent = continent, dest_country_name = country_name) %>%
  select(starts_with("origin"), starts_with("dest"), year, value) %>%
  write_csv(here("data", "student-flows-tidy.csv")) ->
national_data_joined
```

Before we start visualising, let's now break this back into data by origin and by destination. That way, we can [lump](https://forcats.tidyverse.org/reference/fct_lump.html) all the same values together and make a more compact statement about the main comings and goings for a given country.

```{r}
#| label: lumping

# most popular destinations for each origin
national_data_joined %>%
  filter(!is.na(value), value > 0) %>%
  group_by(year, origin_country_name) %>%
  mutate(dest_country_lumped =
    fct_lump_n(f = dest_country_name, n = 10, w = value,
      other = "Other countries")) %>% 
  ungroup() %>% 
  # now add up all the lumped ones
  select(origin_country_name, dest_country_lumped, year, value) %>%
  group_by(year, origin_country_name, dest_country_lumped) %>%
  summarise(value_lumped = sum(value, na.rm = TRUE)) %>%
  ungroup() ->
popular_destinations

# most popular origins for each destination
national_data_joined %>%
  filter(!is.na(value), value > 0) %>%
  group_by(year, dest_country_name) %>%
  mutate(origin_country_lumped =
    fct_lump_n(f = origin_country_name, n = 10, w = value,
      other = "Other countries")) %>% 
  ungroup() %>% 
  # now add up all the lumped ones
  select(dest_country_name, origin_country_lumped, year, value) %>%
  group_by(year, dest_country_name, origin_country_lumped) %>%
  summarise(value_lumped = sum(value, na.rm = TRUE)) %>%
  ungroup() ->
popular_origins
```

```{r}
#| label: exportdata

# list of countries
c(
  national_data_joined$origin_country_name,
  national_data_joined$dest_country_name) %>%
  unique() %>%
  discard(is.na) %>%
  ojs_define(country_list = .)

# full, lumped datasets
ojs_define(popDestinations = popular_destinations)
ojs_define(popOrigins = popular_origins)
ojs_define(yearRange = range(national_data_joined$year))
```

## Visualisation: single country flows

Let's start by looking at who comes _from_ and _to_ any given country.

```{ojs}
//| label: controls
viewof basisSelect = Inputs.select(country_list, {
  label: "Country",
  sort: true
});
viewof yearSelect = Inputs.range([1998, 2021],
  {step: 1, label: "Year"});

// filter the popular origin and destination datasets based on selected country
filteredPopularOrigins = transpose(popOrigins)
  .filter(function(row) {
    return row.dest_country_name == basisSelect && row.year == yearSelect;
  });
filteredPopularDestinations = transpose(popDestinations)
  .filter(function(row) {
    return row.origin_country_name == basisSelect && row.year == yearSelect;
  });

// comptue a fixed x range for a given country across all years
countryOriginRange = d3.extent(
  transpose(popOrigins).filter(function(row) {return row.dest_country_name;}),
  d => d.value_lumped);
countryDestinationRange = d3.extent(
  transpose(popOrigins).filter(function(row) {return row.dest_country_name;}),
  d => d.value_lumped);

commaFormat = d3.format(",.0f");

html`Origin range for ${basisSelect}: ${countryOriginRange}`
html`Destination range for ${basisSelect}: ${countryDestinationRange}`
```
```{ojs}
//| label: popularorigins

popOriginPlot = filteredPopularOrigins.length == 0 ?
  html`No data for student flows <strong>into ${basisSelect}</strong> in <strong>${yearSelect}</strong>.` :
  Plot.plot({
    marks: [
      Plot.barX(filteredPopularOrigins, {
        y: "origin_country_lumped",
        x: "value_lumped",
        fill: "value_lumped",
        sort: {y: "x", reverse: true}
      }),
      Plot.text(filteredPopularOrigins, {
        y: "origin_country_lumped",
        x: "value_lumped",
        text: d => commaFormat(d.value_lumped),
        dx: 25
      })
    ],
    x: {
      label: "Number of students →"//,
      // domain: countryOriginRange
    },
    y: {
      label: ""
    },
    color: {
      scheme: "ylgnbu",
      type: "sqrt",
    },
    marginLeft: 125,
    marginRight: 50,
    caption: html`Which countries send students here?`
  })
```
Where do this country's students go?

```{ojs}
//| label: populardestinations
popDestinationPlot = 
  filteredPopularDestinations.length == 0 ?
  html`No data for student flows <strong>out of ${basisSelect}</strong> in <strong>${yearSelect}</strong>.` :
  Plot.plot({
    marks: [
      Plot.barX(filteredPopularDestinations, {
        y: "dest_country_lumped",
        x: "value_lumped",
        fill: "value_lumped",
        sort: {y: "x", reverse: true}
      }),
      Plot.text(filteredPopularDestinations, {
        y: "dest_country_lumped",
        x: "value_lumped",
        text: d => commaFormat(d.value_lumped),
        dx: 25
      })
    ],
    x: {
      label: "Number of students →"//,
      //domain: countryDestinationRange
    },
    y: {
      label: ""
    },
    color: {
      scheme: "ylorrd",
      type: "sqrt",
    },
    marginLeft: 125,
    marginRight: 50,
    caption: html`Where do this country's students go?`
  });
```

## Net flow indicators

Also of interest are these two indicators:

* `MENF.5T8`: "Net flow of internationally mobile students (inbound - outbound), both sexes (number)"
* `MENFR.5T8`: "Net flow ratio of internationally mobile students (inbound - outbound), both sexes (%)"

<!-- 
# 26505: Inbound internationally mobile students from [continent], both sexes
# xxxxx: [continent]: "Students from" [country], both sexes (number) -->