---
title: "Global education"
subtitle: ""
author: "James Goldie, 360info"
date: "2022-03-15"
code-fold: true
theme: style/article.scss
---

## Getting the data

This data comes from the [UNESCO Institute for Statistics (UIS)](http://data.uis.unesco.org/).

We'll use their [Bulk Data Download Service](https://apiportal.uis.unesco.org/bdds) to acquire the data quickly, but we're particularly interested in the indicators within the Education theme labelled `Number and rates of international mobile students (inbound and outbound)`.

```{r import}
library(tidyverse)
library(pins)
library(here)

data_cache <- here("data", ".cache")
dir.create(data_cache)

# download the zip file (keeping it cached if we redo this)
zipped_data <-
  board_url(
    c(opri = paste0(
      "https://apimgmtstzgjpfeq2u763lag.blob.core.windows.net/",
      "content/MediaLibrary/bdds/OPRI.zip")),
    cache = data_cache) %>%
  pin_download("opri")

# unzip it 
unzip(zipped_data, exdir = data_cache)

# read the coding sheets in
country_map <- read_csv(file.path(data_cache, "OPRI_COUNTRY.csv"))
indicator_map <- read_csv(
  file.path(data_cache, "OPRI_LABEL.csv"),
  col_types = 'ic')
region_map <- read_csv(file.path(data_cache, "OPRI_REGION.csv"))

# read the data in
national_data <- read_csv(
  file.path(data_cache, "OPRI_DATA_NATIONAL.csv"),
  col_types = 'icinc')
```

<!-- Here's what the data looks like. To pass it on to Observable JS, we call `ojs_define`. We also pass a list of the countries in the data on separately so
that we can use it for a dropdown menu.

```{r inspect}
ojs_define(pollution = pollution)
ojs_define(country_list = unique(pollution$country))
```

The names that we use in `ojs_define` are now available below.

## The visualisation

Now, let's chart the data using
[Observable Plot](https://observablehq.com/@observablehq/plot)! And to make things a little trickier, let's throw a dropdown menu for the country in,
courtesy of [Observable Inputs](https://observablehq.com/@observablehq/inputs). 

```{ojs pollutionplot}

// here's our dropdown menu, using the country list from R
viewof countrySelect = Inputs.select(country_list, {label: "Pick a country:"});

// transpose() changes our data from column-major (in R/Python) to row-major for
// Observable Plot. Then the filter function filters it based on the country
// input above (hence it's reactive!)
filteredPollution = transpose(pollution).filter(function(row) {
  return row.country == countrySelect;
})

// finally, here's out chart
pollutionChart = Plot.plot({
  marks: [
    // horizontal line at y = 0
    Plot.ruleY([0]),
    // bars of tonnes emitted per year, with a tooltip
    Plot.barY(filteredPollution, {
      x: "year",
      y: "co_tpyr",
      title: (d) => `${d.country} in ${d.year}: ${d.co_tpyr} tonnes`
    })
  ],
  width: 1024
});
```

Nice! Now check out [`demo-embed.qmd`](demo-embed.html) for the embeddable version!

The above example shows that we can have 'reactive' plots at the language level: I can connect a dropdown or other input to the plot and have it respond very easily.

Newer versions of Observable Plot support tooltips and hover styling, although it seems that the version embedded with Quarto doesn't. Other kinds of interactivity don't seem to work.

That said, we can write any kind of JavaScript in an OJS cell, or even import and reuse a chart from a notebook published on <observablehq.com>, provided it's marked with an open source licence. We can even combine this approach with Observable Inputs.

For example, [here's one from d3](https://observablehq.com/@d3/bar-chart-transitions), who are also the makers of Observable Plot:

```{ojs d3barchart}
import {BarChart} from "@d3/bar-chart-transitions"

d3barchart = BarChart(filteredPollution, {
  x: d => d.year,
  y: d => d.co_tpyr,
  yFormat: "",
  yLabel: "â†‘ Carbon Monoxide",
  width,
  height: 350,
  color: "#333"
});
```

Note that the dropdown menu from the previous chart controls this one too! So we can use Observable Inputs with custom charts (although note there's no transition - that would be hadled using the chart's `update` method). -->